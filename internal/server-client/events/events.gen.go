// Package clientevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230506011706-29ebe3262399 DO NOT EDIT.
package clientevents

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/Pickausernaame/chat-service/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for BaseEventEventType.
const (
	BaseEventEventTypeMessageBlockedEvent BaseEventEventType = "MessageBlockedEvent"
	BaseEventEventTypeMessageSentEvent    BaseEventEventType = "MessageSentEvent"
	BaseEventEventTypeNewMessageEvent     BaseEventEventType = "NewMessageEvent"
)

// Defines values for MessageBlockedEventEventType.
const (
	MessageBlockedEventEventTypeMessageBlockedEvent MessageBlockedEventEventType = "MessageBlockedEvent"
	MessageBlockedEventEventTypeMessageSentEvent    MessageBlockedEventEventType = "MessageSentEvent"
	MessageBlockedEventEventTypeNewMessageEvent     MessageBlockedEventEventType = "NewMessageEvent"
)

// Defines values for MessageSentEventEventType.
const (
	MessageSentEventEventTypeMessageBlockedEvent MessageSentEventEventType = "MessageBlockedEvent"
	MessageSentEventEventTypeMessageSentEvent    MessageSentEventEventType = "MessageSentEvent"
	MessageSentEventEventTypeNewMessageEvent     MessageSentEventEventType = "NewMessageEvent"
)

// Defines values for NewMessageEventEventType.
const (
	NewMessageEventEventTypeMessageBlockedEvent NewMessageEventEventType = "MessageBlockedEvent"
	NewMessageEventEventTypeMessageSentEvent    NewMessageEventEventType = "MessageSentEvent"
	NewMessageEventEventTypeNewMessageEvent     NewMessageEventEventType = "NewMessageEvent"
)

// BaseEvent defines model for BaseEvent.
type BaseEvent struct {
	// EventId Unique identifier for the event
	EventId types.EventID `json:"eventId"`

	// EventType Type of the event
	EventType BaseEventEventType `json:"eventType"`

	// RequestId Unique identifier for the request
	RequestId types.RequestID `json:"requestId"`
}

// BaseEventEventType Type of the event
type BaseEventEventType string

// MessageBlockedEvent defines model for MessageBlockedEvent.
type MessageBlockedEvent struct {
	// EventId Unique identifier for the event
	EventId types.EventID `json:"eventId"`

	// EventType Type of the event
	EventType MessageBlockedEventEventType `json:"eventType"`
	MessageId types.MessageID              `json:"messageId"`

	// RequestId Unique identifier for the request
	RequestId types.RequestID `json:"requestId"`
}

// MessageBlockedEventEventType Type of the event
type MessageBlockedEventEventType string

// MessageId defines model for MessageId.
type MessageId struct {
	MessageId types.MessageID `json:"messageId"`
}

// MessageSentEvent defines model for MessageSentEvent.
type MessageSentEvent struct {
	// EventId Unique identifier for the event
	EventId types.EventID `json:"eventId"`

	// EventType Type of the event
	EventType MessageSentEventEventType `json:"eventType"`
	MessageId types.MessageID           `json:"messageId"`

	// RequestId Unique identifier for the request
	RequestId types.RequestID `json:"requestId"`
}

// MessageSentEventEventType Type of the event
type MessageSentEventEventType string

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	// AuthorId Unique identifier for the author
	AuthorId *types.UserID `json:"authorId,omitempty"`

	// Body Body of the message
	Body string `json:"body"`

	// CreatedAt Date and time of event creation
	CreatedAt time.Time `json:"createdAt"`

	// EventId Unique identifier for the event
	EventId types.EventID `json:"eventId"`

	// EventType Type of the event
	EventType NewMessageEventEventType `json:"eventType"`

	// IsService Indicates if the event is a service event
	IsService bool            `json:"isService"`
	MessageId types.MessageID `json:"messageId"`

	// RequestId Unique identifier for the request
	RequestId types.RequestID `json:"requestId"`
}

// NewMessageEventEventType Type of the event
type NewMessageEventEventType string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUTW/jOAz9KwJ3j0qcopdCt027hwDzhen0VPSgWHTMqSy5Ep22CPLfB5KdiesWA7RA",
	"5mSLkvj4nh65g9I3rXfoOILaQSxrbHT+XeqI/2/RcVq0wbcYmDBvYQqvTPo1GMtALZN3oODG0UOHggw6",
	"poowiMoHwTWKfAUkVD40mkFB15EBCfzcIiiIHMhtQMLTbONnQzB94jzXsLoa782oaX3oC9Ncg4INcd2t",
	"56Vvim9U3usuYnBaN1iUteZZxLClEgtynOK2yKlhv5c9lx8ZcMomRYWvXtSPrmtA3cIXfPyMMerNoJGE",
	"YXmNjiehpfXlPZo+ejflvJcQ8KHD+E5Fh0sf0vT7AHgiVQdKFNAkrQ52GYs9Jn23f1sqtQNt7dcK1O0O",
	"/g1YgYJ/iqNhi8GtxdGqe/nnkwPMysB+hNoL/9LjzXjr/QofMv8dhY/FjlgdnXh6IaftcFpEOX0s3XHt",
	"w/v6p7/zofa5iRhON5HW3jy/JrL05vkwjIbnBgmNfvqEbpMQzxeLhYSG3CFw9sakKQNqRvMfvwa40oxC",
	"OyOYmjz2crOKfCOdGAllNOMsHYM3IChe99xeQ6ycoVIzRkGjqSooCi0GQX4P2iHv2nuL2sHU8VmkMZ8x",
	"8HHG+vVPLDl5NCUgV/lUFRPbtLvU7l5cd216OnFZaxaXllJF2ZERJGwxxL727Vki51t0uiVQcD4/my9A",
	"5ueOoFxnrYREAkPMrp+oi1u0vm1S9v4USOiCBQWPURWF9aW2tY+sLhYXi+Ixppp/BQAA//8zgQW6ngcA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
