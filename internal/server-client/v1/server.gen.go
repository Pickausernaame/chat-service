// Package clientv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230506011706-29ebe3262399 DO NOT EDIT.
package clientv1

import (
	"fmt"
	"net/http"
	"time"

	"github.com/Pickausernaame/chat-service/internal/server"
	"github.com/Pickausernaame/chat-service/internal/types"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCodeCreateChatError    ErrorCode = 1000
	ErrorCodeCreateProblemError ErrorCode = 1001
)

// Error defines model for Error.
type Error struct {
	// Code contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
	Code    ErrorCode `json:"code"`
	Details *string   `json:"details,omitempty"`
	Message string    `json:"message"`
}

// ErrorCode contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
type ErrorCode int

// GetHistoryRequest defines model for GetHistoryRequest.
type GetHistoryRequest struct {
	Cursor   *string `json:"cursor,omitempty"`
	PageSize *int    `json:"pageSize,omitempty"`
}

// GetHistoryResponse defines model for GetHistoryResponse.
type GetHistoryResponse struct {
	Data  *MessagesPage `json:"data,omitempty"`
	Error *Error        `json:"error,omitempty"`
}

// Message defines model for Message.
type Message struct {
	AuthorId   *types.UserID   `json:"authorId,omitempty"`
	Body       string          `json:"body"`
	CreatedAt  time.Time       `json:"createdAt"`
	Id         types.MessageID `json:"id"`
	IsBlocked  bool            `json:"isBlocked"`
	IsReceived bool            `json:"isReceived"`
	IsService  bool            `json:"isService"`
}

// MessageHeader defines model for MessageHeader.
type MessageHeader struct {
	AuthorId  *types.UserID    `json:"authorId,omitempty"`
	CreatedAt *time.Time       `json:"createdAt,omitempty"`
	Id        *types.MessageID `json:"id,omitempty"`
}

// MessagesPage defines model for MessagesPage.
type MessagesPage struct {
	Messages []Message `json:"messages"`
	Next     string    `json:"next"`
}

// SendMessageRequest defines model for SendMessageRequest.
type SendMessageRequest struct {
	MessageBody string `json:"messageBody"`
}

// SendMessageResponse defines model for SendMessageResponse.
type SendMessageResponse struct {
	Data  *MessageHeader `json:"data,omitempty"`
	Error *Error         `json:"error,omitempty"`
}

// XRequestIDHeader defines model for XRequestIDHeader.
type XRequestIDHeader = types.RequestID

// PostGetHistoryParams defines parameters for PostGetHistory.
type PostGetHistoryParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostSendMessageParams defines parameters for PostSendMessage.
type PostSendMessageParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetHistoryJSONRequestBody defines body for PostGetHistory for application/json ContentType.
type PostGetHistoryJSONRequestBody = GetHistoryRequest

// PostSendMessageJSONRequestBody defines body for PostSendMessage for application/json ContentType.
type PostSendMessageJSONRequestBody = SendMessageRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /getHistory)
	PostGetHistory(ctx echo.Context, params PostGetHistoryParams) error

	// (POST /sendMessage)
	PostSendMessage(ctx echo.Context, params PostSendMessageParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostGetHistory converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetHistory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetHistoryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetHistory(ctx, params)
	return err
}

// PostSendMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostSendMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSendMessageParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSendMessage(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router server.EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router server.EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/getHistory", wrapper.PostGetHistory)
	router.POST(baseURL+"/sendMessage", wrapper.PostSendMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var SwaggerSpec = []string{

	"H4sIAAAAAAAC/9xW32/jNgz+VwRuDxugxM66h4OBPfTHdu2wA4Jrhx3Q5UGx2VirLfkkOmtW+H8fKDmx",
	"c0l33WEdtntKLEoi+X0fKT5CbuvGGjTkIXuERjlVI6ELX+/e4vsWPV1dXKIq0PGaNpBBGT8lGFUjZPBu",
	"0u+cXF2ABIfvW+2wgIxcixJ8XmKt+PSddbUiyKBtdQESaNPweU9OmxVIeJis7KRf5B8/3YUwtk503VhH",
	"MWIqIYOVprJdTnNbJ3Od36vWozNK1ZjkpaKJR7fWOSbaEK9XSbgcuq7rtuGFjL93zoY0G2cbdKQxLOe2",
	"QP790uEdZPBFMqCW9KeTcPScN3YSCiSlq3B2P8VOQo3eqxUesXVj6G53G2X0v+gkDE6yRyjQ5043pC1z",
	"kltDShsvLm9u5gJ5o+BzXihTCN9gru90Lpat1wa9F5Vd6Xxv31dUoqiUJ1G3nsQSxa9tmp7gd2KWpunX",
	"U5CApq0hu+VvOUvT2UJCrY2uefXbNN0RyjivgkIeJnxmslaOteI5r10S5w4V4XmpKOIuPzTNnV1WWEcr",
	"5/8a6VJ7sm7T6+IIV63zkcMD5Bu1wmv9RwCvVg8x7BmHvUtidphD0MjYsW+s8XjouVCkPqaSN5FTP2di",
	"Owm4FdxHpRXjeDOIZ9+5aqm07qr4tCr72aN7qRKTsLTF5igheWC5OKW9qAtFOCFd40HonQT9iRn2wL1c",
	"ktqfVTa/x2KU6dLaCpUJcfu3mKNeP22/jncfM3/QGELKAdQxhHs+xvGML18MGhp6+v9HSZ+PYEbFHJvB",
	"AQ99+w//NWHtn9lbOOk+E+Wc2vC3wQd69oPjoT/AYrlGU/QXP9ly+3NnfZnX6uEnNCuG5yTtu+t2YSaf",
	"F0O468D/P9B5e9X/7dbLcwLmrdO0uWZbdLxE5dCdtpza9uuHrdR+/OUG+ukiVHOwDtoriZrY1LW5s4Ed",
	"TRVbzpS5F9dtw1IT/DyK80qjIXE6vwIJa3Q+vvnrGSdiGzSq0ZDByTSdnoAM2gzxJavduxVQs5G+/cnh",
	"NZJgsYoy7uSHntFVbOc+AHPraXgBg4NhTrw9juCwJTmYI7tFJB09bUXD4wuaEJ1qmkrnwXvym+cQH0cj",
	"5F+xdTgedPv64nk0LEQlBYy+SdMXCaAXa4hgH/Bt3YtKe5r26kr8oPSnueJyEAZ/F32dCLKCxzbm7zhv",
	"owL67xJ3pMv8y8wd6zNPUyf6hyiSN+oNAdVxV7hdMGb8DGwx37/wAtdY2abm8o67QELrqr5BZElS2VxV",
	"pfWUvUpfpQnX/KL7MwAA///5F2sPuQ0AAA==",
}

func GetSwagger() (swagger *openapi3.T, err error) {
	return server.GetSwagger(SwaggerSpec)
}
