// Package managerevents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230506011706-29ebe3262399 DO NOT EDIT.
package managerevents

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/Pickausernaame/chat-service/internal/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for BaseEventEventType.
const (
	BaseEventEventTypeNewChatEvent    BaseEventEventType = "NewChatEvent"
	BaseEventEventTypeNewMessageEvent BaseEventEventType = "NewMessageEvent"
)

// Defines values for NewChatEventEventType.
const (
	NewChatEventEventTypeNewChatEvent    NewChatEventEventType = "NewChatEvent"
	NewChatEventEventTypeNewMessageEvent NewChatEventEventType = "NewMessageEvent"
)

// Defines values for NewMessageEventEventType.
const (
	NewMessageEventEventTypeNewChatEvent    NewMessageEventEventType = "NewChatEvent"
	NewMessageEventEventTypeNewMessageEvent NewMessageEventEventType = "NewMessageEvent"
)

// BaseEvent defines model for BaseEvent.
type BaseEvent struct {
	// EventId Unique identifier for the event
	EventId types.EventID `json:"eventId"`

	// EventType Type of the event
	EventType BaseEventEventType `json:"eventType"`

	// RequestId Unique identifier for the request
	RequestId types.RequestID `json:"requestId"`
}

// BaseEventEventType Type of the event
type BaseEventEventType string

// MessageId defines model for MessageId.
type MessageId struct {
	MessageId types.MessageID `json:"messageId"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	// CanTakeMoreProblems Indicates if manager can take more problems
	CanTakeMoreProblems bool `json:"canTakeMoreProblems"`

	// ChatId Unique identifier for the chat
	ChatId types.ChatID `json:"chatId"`

	// ClientId Unique identifier for the client
	ClientId types.UserID `json:"clientId"`

	// EventId Unique identifier for the event
	EventId types.EventID `json:"eventId"`

	// EventType Type of the event
	EventType NewChatEventEventType `json:"eventType"`

	// RequestId Unique identifier for the request
	RequestId types.RequestID `json:"requestId"`
}

// NewChatEventEventType Type of the event
type NewChatEventEventType string

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	// AuthorId Unique identifier for the author
	AuthorId types.UserID `json:"authorId"`

	// Body Body of the message
	Body string `json:"body"`

	// ChatId Unique identifier for the chat
	ChatId types.ChatID `json:"chatId"`

	// CreatedAt Date and time of event creation
	CreatedAt time.Time `json:"createdAt"`

	// EventId Unique identifier for the event
	EventId types.EventID `json:"eventId"`

	// EventType Type of the event
	EventType NewMessageEventEventType `json:"eventType"`
	MessageId types.MessageID          `json:"messageId"`

	// RequestId Unique identifier for the request
	RequestId types.RequestID `json:"requestId"`
}

// NewMessageEventEventType Type of the event
type NewMessageEventEventType string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVTW/jOAz9KwJ3j0qcopdCt+3HocC2U8y0p6IHxqZjTSzJleikRZD/PpDsfBcDJECL",
	"wZziUKLE9/getYDcmcZZshxALSDkFRlMn5cY6GZGluOfxruGPGtKSxTDt0X8LCjkXjesnQUFT1a/tiR0",
	"QZZ1qcmL0nnBFYmUAhJK5w0yKGhbXYAEfm8IFAT22k5Awttg4gZ9MP6EYarh9np7baBN43xXGHIFCiaa",
	"q3Y8zJ3JHnQ+xTaQt4iGsrxCHgTyM51Tpi3HeJ2lo2G5lB2Wx3ThPpoYFa7cqZ9sa0A9wz3Nryrkmz58",
	"T/M7CgEnPWUv+8iWEjy9thSO5K1POom57/2Fn8RdD0l7KiIjK1FsU7oN+mUpoeeoo2BXU2Z76Xisq5O/",
	"Buum2IhqRwtqAVjX30pQzwv411MJCv7JNi7LeotlG38t5T4ZOdpHnNKd8/Tg3bgmEw5Fc2sLnSNTELoU",
	"Bi1OyIscrWCckjDOk2hWyWsKx87VhDbqMSI+Towx4yQlRno+z8J5rY+eR13OSWCeAvkv0tka2bpb8kNt",
	"bMaNG/+knGHZ63JnKJ0ozd/t3Bj6UMTYcuX8cW3pcv64tkgYu+L9EMilK95XL0Q/E0CCwbf/yU7ijeej",
	"0UiC0XYVOPvgYfh7jOgJmYr/+BDLNTIJtIVgbdKjmh4JkTLiji0wBTIN4rYDRPv2WCus7892BWtaP/JG",
	"PEjb0sU6WXMdVy/RTsWPtolsiMiTuEruE8kJcYTOyIcOzews9s01ZLHRoOB8eDYcgUwMBlC2rWsJkSjy",
	"IbltjwyaUe0aE0/vdoGE1tegYB5UltUux7pygdXF6GKUzUOs+VcAAAD//2eWvrurCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
