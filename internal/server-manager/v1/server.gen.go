// Package managerv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230506011706-29ebe3262399 DO NOT EDIT.
package managerv1

import (
	"fmt"
	"net/http"

	"github.com/Pickausernaame/chat-service/internal/server"
	"github.com/Pickausernaame/chat-service/internal/types"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCodeManagerOverloadedError ErrorCode = 5000
)

// Chat defines model for Chat.
type Chat struct {
	ChatId   types.ChatID `json:"chatId"`
	ClientId types.UserID `json:"clientId"`
}

// ChatList defines model for ChatList.
type ChatList struct {
	Chats []Chat `json:"chats"`
}

// Error defines model for Error.
type Error struct {
	// Code contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
	Code    ErrorCode `json:"code"`
	Details *string   `json:"details,omitempty"`
	Message string    `json:"message"`
}

// ErrorCode contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
type ErrorCode int

// ManagerAvailability defines model for ManagerAvailability.
type ManagerAvailability struct {
	Available *bool `json:"available,omitempty"`
}

// PostFreeHandsResponse defines model for PostFreeHandsResponse.
type PostFreeHandsResponse struct {
	Data  *string `json:"data"`
	Error *Error  `json:"error,omitempty"`
}

// PostGetChatsResponse defines model for PostGetChatsResponse.
type PostGetChatsResponse struct {
	Data  *ChatList `json:"data,omitempty"`
	Error *Error    `json:"error,omitempty"`
}

// PostGetFreeHandsBtnAvailabilityResponse defines model for PostGetFreeHandsBtnAvailabilityResponse.
type PostGetFreeHandsBtnAvailabilityResponse struct {
	Data  *ManagerAvailability `json:"data,omitempty"`
	Error *Error               `json:"error,omitempty"`
}

// XRequestIDHeader defines model for XRequestIDHeader.
type XRequestIDHeader = types.RequestID

// PostFreeHandsParams defines parameters for PostFreeHands.
type PostFreeHandsParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetFreeHandsBtnAvailabilityParams defines parameters for PostGetFreeHandsBtnAvailability.
type PostGetFreeHandsBtnAvailabilityParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /freeHands)
	PostFreeHands(ctx echo.Context, params PostFreeHandsParams) error

	// (POST /getChats)
	PostGetChats(ctx echo.Context) error

	// (POST /getFreeHandsBtnAvailability)
	PostGetFreeHandsBtnAvailability(ctx echo.Context, params PostGetFreeHandsBtnAvailabilityParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFreeHands converts echo context to params.
func (w *ServerInterfaceWrapper) PostFreeHands(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFreeHandsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFreeHands(ctx, params)
	return err
}

// PostGetChats converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetChats(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetChats(ctx)
	return err
}

// PostGetFreeHandsBtnAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetFreeHandsBtnAvailability(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetFreeHandsBtnAvailabilityParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetFreeHandsBtnAvailability(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router server.EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router server.EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/freeHands", wrapper.PostFreeHands)
	router.POST(baseURL+"/getChats", wrapper.PostGetChats)
	router.POST(baseURL+"/getFreeHandsBtnAvailability", wrapper.PostGetFreeHandsBtnAvailability)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var SwaggerSpec = []string{

	"H4sIAAAAAAAC/8xW0W/bthP+V4j7/R42QLaUZQMKAXtIk7XJsGFBk2EFMj/Q0tliQ5Eq7+Q2CPS/D0fJ",
	"tjzbS5shwJ5ikUfed9999zGPUPi68Q4dE+SP0Oiga2QM8ev9O/zYIvHVxSXqEoOsGQc5VP1nAk7XCDm8",
	"nwyRk6sLSCDgx9YELCHn0GICVFRYazm98KHWDDm0rSkhAX5o5DxxMG4JCXyeLP1kWJQ/NN1AGO9OTN34",
	"wD1iriCHpeGqnU8LX6fXprjXLWFwWteYFpXmCWFYmQJT41jWbRovh67rujW8WPF5pftbg28wsMG4Kldc",
	"lc/DLze+FPgECmvQPRvb74ThxYgdy+BuTeEI8WyD0M8/YMHQJZH+XwwdaUH8YRjr+OP/AReQw//SrYLT",
	"oZNpbGO3SaBD0A9wCBLBrEvgpxB8OJDTl/hUpnj0XAK7BEpkbWw8u0t+l0CNRHqJB/b+BmsdmPT5N/jO",
	"BzQlUhFMw8bLJBbesTaO1OXt7bVCCVRyjpR2paIGC7MwhZq3ZBwSKeuXptiJ+4YrVFYTq7olVnNUf7ZZ",
	"doo/qpMsy76dQgLo2hryux+yLJslUBtnaln4Pss2FEv/l9ESPk8kfLLSQcyBpKQN/l+100sMv60wWK9L",
	"LHvmpcZh62yljdVzYw0/7HdE97t2TOPce4va9ZK79sRvAuKldiW9Q2q8I9y/p9Qc7ci1driuN6q9ruFa",
	"GU9qYJv/LbLo7wvSPyXhOArPR7Eh4jW7Ma//DtihRn01RnFdLNpg+OFG9vr0c9QBw1krxrP+erN2tZ//",
	"uIXBq2Pb4+7W5irmpq/euIWP+jAsnYXX2t2rm7YRY1NCqxpKUGfXV5DACgP1w7Q6kUp8g043BnI4nWbT",
	"U0iiFUaA6WJNaeTO9061O5E3yKT0iB218EE5/KR66yOZKCFdywGx7l3VxnzbV/juMKPbkHTvle5m4ih9",
	"jyPQ77Ks9zPH6CJk3TTWFBFB+oEE9+Polf6nFh6esEj8V/KgAlJreTroIV0Oc3Oc2rfISrqjmuDnFmtS",
	"msgsHZaKvar7rh5kdz2T8MLM7M3+AWJkqpVfqPj+qE+Gq009IyqODe9xds4rLO5JiURVJSd32J8e4+Vo",
	"ov++Dr/E4w40YCBqR5tjLY7MKdY9tqW7mVQl//WsWdm9+wJXaH1To2PVR0ECbbCDQ+Vpan2hbeWJ81fZ",
	"q5NUPGfW/RUAAP//JFy0iIgLAAA=",
}

func GetSwagger() (swagger *openapi3.T, err error) {
	return server.GetSwagger(SwaggerSpec)
}
