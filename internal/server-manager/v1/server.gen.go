// Package managerv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230506011706-29ebe3262399 DO NOT EDIT.
package managerv1

import (
	"fmt"
	"net/http"
	"time"

	"github.com/Pickausernaame/chat-service/internal/server"
	"github.com/Pickausernaame/chat-service/internal/types"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCodeManagerOverloadedError ErrorCode = 5000
)

// Chat defines model for Chat.
type Chat struct {
	ChatId   types.ChatID `json:"chatId"`
	ClientId types.UserID `json:"clientId"`
}

// ChatList defines model for ChatList.
type ChatList struct {
	Chats []Chat `json:"chats"`
}

// Error defines model for Error.
type Error struct {
	// Code contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
	Code    ErrorCode `json:"code"`
	Details *string   `json:"details,omitempty"`
	Message string    `json:"message"`
}

// ErrorCode contains HTTP error codes and specific business logic error codes (the last must be >= 1000).
type ErrorCode int

// GetChatHistoryRequest defines model for GetChatHistoryRequest.
type GetChatHistoryRequest struct {
	ChatId   types.ChatID `json:"chatId"`
	Cursor   *string      `json:"cursor,omitempty"`
	PageSize *int         `json:"pageSize,omitempty"`
}

// GetChatHistoryResponse defines model for GetChatHistoryResponse.
type GetChatHistoryResponse struct {
	Data  *MessagesPage `json:"data,omitempty"`
	Error *Error        `json:"error,omitempty"`
}

// ManagerAvailability defines model for ManagerAvailability.
type ManagerAvailability struct {
	Available *bool `json:"available,omitempty"`
}

// Message defines model for Message.
type Message struct {
	AuthorId  types.UserID    `json:"authorId"`
	Body      string          `json:"body"`
	CreatedAt time.Time       `json:"createdAt"`
	Id        types.MessageID `json:"id"`
}

// MessagesPage defines model for MessagesPage.
type MessagesPage struct {
	Messages []Message `json:"messages"`
	Next     string    `json:"next"`
}

// PostFreeHands defines model for PostFreeHands.
type PostFreeHands struct {
	Data  *string `json:"data"`
	Error *Error  `json:"error,omitempty"`
}

// PostGetChats defines model for PostGetChats.
type PostGetChats struct {
	Data  *ChatList `json:"data,omitempty"`
	Error *Error    `json:"error,omitempty"`
}

// PostGetFreeHandsBtnAvailability defines model for PostGetFreeHandsBtnAvailability.
type PostGetFreeHandsBtnAvailability struct {
	Data  *ManagerAvailability `json:"data,omitempty"`
	Error *Error               `json:"error,omitempty"`
}

// XRequestIDHeader defines model for XRequestIDHeader.
type XRequestIDHeader = types.RequestID

// PostFreeHandsParams defines parameters for PostFreeHands.
type PostFreeHandsParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetChatHistoryParams defines parameters for PostGetChatHistory.
type PostGetChatHistoryParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetChatsParams defines parameters for PostGetChats.
type PostGetChatsParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetFreeHandsBtnAvailabilityParams defines parameters for PostGetFreeHandsBtnAvailability.
type PostGetFreeHandsBtnAvailabilityParams struct {
	XRequestID XRequestIDHeader `json:"X-Request-ID"`
}

// PostGetChatHistoryJSONRequestBody defines body for PostGetChatHistory for application/json ContentType.
type PostGetChatHistoryJSONRequestBody = GetChatHistoryRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /freeHands)
	PostFreeHands(ctx echo.Context, params PostFreeHandsParams) error

	// (POST /getChatHistory)
	PostGetChatHistory(ctx echo.Context, params PostGetChatHistoryParams) error

	// (POST /getChats)
	PostGetChats(ctx echo.Context, params PostGetChatsParams) error

	// (POST /getFreeHandsBtnAvailability)
	PostGetFreeHandsBtnAvailability(ctx echo.Context, params PostGetFreeHandsBtnAvailabilityParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFreeHands converts echo context to params.
func (w *ServerInterfaceWrapper) PostFreeHands(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFreeHandsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFreeHands(ctx, params)
	return err
}

// PostGetChatHistory converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetChatHistory(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetChatHistoryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetChatHistory(ctx, params)
	return err
}

// PostGetChats converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetChats(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetChatsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetChats(ctx, params)
	return err
}

// PostGetFreeHandsBtnAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) PostGetFreeHandsBtnAvailability(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostGetFreeHandsBtnAvailabilityParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Request-ID")]; found {
		var XRequestID XRequestIDHeader
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Request-ID, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Request-ID", runtime.ParamLocationHeader, valueList[0], &XRequestID)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Request-ID: %s", err))
		}

		params.XRequestID = XRequestID
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Request-ID is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGetFreeHandsBtnAvailability(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router server.EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router server.EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/freeHands", wrapper.PostFreeHands)
	router.POST(baseURL+"/getChatHistory", wrapper.PostGetChatHistory)
	router.POST(baseURL+"/getChats", wrapper.PostGetChats)
	router.POST(baseURL+"/getFreeHandsBtnAvailability", wrapper.PostGetFreeHandsBtnAvailability)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var SwaggerSpec = []string{

	"H4sIAAAAAAAC/9RW227jNhD9FWLahxaQLaXbAgsDfcilu0nRRYMmRRdI/UBLY4sbidSSI2/cQP9eDCnb",
	"Uiznhk3RPCWmeDlzZs6ZuYXUlJXRqMnB5BYqaWWJhNb/+vgHfq7R0dnJKcoMLa8pDRPIw88ItCwRJvBx",
	"1O4cnZ1ABBY/18piBhOyNUbg0hxLyafnxpaSYAJ1rTKIgFYVn3dklV5ABDejhRm1i/zHjTcQul9HqqyM",
	"pYCYcpjAQlFez8apKeNzlV7L2qHVUpYYp7mkkUO7VCnGShOvF7G/HJqmadbwfMTHuQy3WlOhJYV+la84",
	"y56Hn298KfARpIVC/Wxsfzq0L0Zstwyu1hR2EE83CM3sE6YETeTp/025PSnw/yjC0v/zrcU5TOCbeFvB",
	"cZvJ2Kex2TwgrZUrGILkYNpE8Iu1xg68aTJ86CV/9Jg3NhFkSFIV/myf/CaCEp2TCxz4dgfWemMU3t/g",
	"O27RZOhSqypShpWYGk1SaSdOLy/PBfJGweeckDoTrsJUzVUqZrVTGp0ThVmotLfvO8pRFNKRKGtHYobi",
	"7zpJ3uDP4iBJku/HEAHquoTJ1U9JkkwjKJVWJS/8mCQbijn/C28JNyPePlpKy+bgOKQN/g9SywXa35do",
	"CyMzzALzHON7JM7aqXJk7KpV/auSYm1dqKKd3FdygRfqH5++Ut4E9g6YvQ2XB7tU7pHQEFmuMtrhLluZ",
	"JPlQBX8I9ebOueiaCHAthgfLPqi8zenhUqpCzlShaLULRIavRbf+Z8YUKHV7y1Yed07WlBv7f3S4CGYm",
	"Ww0mPLUoCbND6qHOJOGIVIk70JsI1DMjbIn7j2zcg/Jhd4OMtlmabnMZKmonoa2/Pd7M16Wx4+cRaLyh",
	"Rzuqg/YAYzw3jt5ZxFOpM7dfOLou2rINk8xO2p6qFn63Va97nl43PfL5r28CPyJ9v24fZSADBvBkbDyG",
	"YVpbRasL/haen6G0aA9rLuH1r3drifz61yW0w5u3E/91q5mcqApRKz03vkoUcSbhSOprcVFXLBHBdIo2",
	"BHF4fgYRLNG60F2XBxyJqVDLSsEE3oyT8RuIvKg8wHjeqyETWla/RV8gOSE77Ii5sULjFxFmIcctlkmX",
	"fICd7k51Rr2x/GqY0e2WeGdsb6YsiNAkPNAfkiQMOJpQe8iyqgqVegTxJ8e4bztj+30p7GP1hD8xfmHR",
	"1QWN2zqIF73utp/Y90iC3UvkYecwj/1e+bXI9GtHrf9/FR6HB6A7Dswu1LxgMvcMFgNZXZu8KJTbSZ27",
	"P2ksKFFZMyuwdEI6pxYaM0FGlEGI9yXyNehhA3WAOPZuYea+cp34oijfUNFh8V6LHiT2OMf02gk2JJHz",
	"yZ7m9mpj70OvguW96AeIbwnqOVHXeTotyMfbbT5XU46Gp6Q1G/27T3CJhalK1CTCLoigtkXbhyZxXJhU",
	"FrlxNHmbvD2IubNMm38DAAD//wxclct/EQAA",
}

func GetSwagger() (swagger *openapi3.T, err error) {
	return server.GetSwagger(SwaggerSpec)
}
