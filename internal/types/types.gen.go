// Code generated by cmd/gen-types; DO NOT EDIT.
package types

import (
	"database/sql/driver"
	"errors"

	"github.com/google/uuid"
)

type ChatID uuid.UUID

var ChatIDNil ChatID

func NewChatID() ChatID {
	return ChatID(uuid.New())
}

func (t ChatID) IsZero() bool { return t.isZero() }

func (t ChatID) MarshalText() ([]byte, error) {
	return []byte(t.string()), nil
}

func (t ChatID) Matches(x interface{}) bool {
	value, ok := x.(ChatID)
	if !ok {
		return false
	}
	return t.String() == value.String()
}

func (t ChatID) String() string { return t.string() }

func (t ChatID) Validate() error {
	if t.isZero() {
		return errors.New("empty value")
	}
	return nil
}

func (t ChatID) Value() (driver.Value, error) { return t.string(), nil }

func (t *ChatID) Scan(src any) error { return t.scan(src) }

func (t *ChatID) UnmarshalText(text []byte) error { return t.scan(text) }

func (t *ChatID) isZero() bool {
	return t == nil || (uuid.UUID)(*t) == uuid.Nil
}

func (t *ChatID) scan(v any) error {
	return (*uuid.UUID)(t).Scan(v)
}

func (t ChatID) string() string {
	return uuid.UUID(t).String()
}

type MessageID uuid.UUID

var MessageIDNil MessageID

func NewMessageID() MessageID {
	return MessageID(uuid.New())
}

func (t MessageID) IsZero() bool { return t.isZero() }

func (t MessageID) MarshalText() ([]byte, error) {
	return []byte(t.string()), nil
}

func (t MessageID) Matches(x interface{}) bool {
	value, ok := x.(MessageID)
	if !ok {
		return false
	}
	return t.String() == value.String()
}

func (t MessageID) String() string { return t.string() }

func (t MessageID) Validate() error {
	if t.isZero() {
		return errors.New("empty value")
	}
	return nil
}

func (t MessageID) Value() (driver.Value, error) { return t.string(), nil }

func (t *MessageID) Scan(src any) error { return t.scan(src) }

func (t *MessageID) UnmarshalText(text []byte) error { return t.scan(text) }

func (t *MessageID) isZero() bool {
	return t == nil || (uuid.UUID)(*t) == uuid.Nil
}

func (t *MessageID) scan(v any) error {
	return (*uuid.UUID)(t).Scan(v)
}

func (t MessageID) string() string {
	return uuid.UUID(t).String()
}

type ProblemID uuid.UUID

var ProblemIDNil ProblemID

func NewProblemID() ProblemID {
	return ProblemID(uuid.New())
}

func (t ProblemID) IsZero() bool { return t.isZero() }

func (t ProblemID) MarshalText() ([]byte, error) {
	return []byte(t.string()), nil
}

func (t ProblemID) Matches(x interface{}) bool {
	value, ok := x.(ProblemID)
	if !ok {
		return false
	}
	return t.String() == value.String()
}

func (t ProblemID) String() string { return t.string() }

func (t ProblemID) Validate() error {
	if t.isZero() {
		return errors.New("empty value")
	}
	return nil
}

func (t ProblemID) Value() (driver.Value, error) { return t.string(), nil }

func (t *ProblemID) Scan(src any) error { return t.scan(src) }

func (t *ProblemID) UnmarshalText(text []byte) error { return t.scan(text) }

func (t *ProblemID) isZero() bool {
	return t == nil || (uuid.UUID)(*t) == uuid.Nil
}

func (t *ProblemID) scan(v any) error {
	return (*uuid.UUID)(t).Scan(v)
}

func (t ProblemID) string() string {
	return uuid.UUID(t).String()
}

type UserID uuid.UUID

var UserIDNil UserID

func NewUserID() UserID {
	return UserID(uuid.New())
}

func (t UserID) IsZero() bool { return t.isZero() }

func (t UserID) MarshalText() ([]byte, error) {
	return []byte(t.string()), nil
}

func (t UserID) Matches(x interface{}) bool {
	value, ok := x.(UserID)
	if !ok {
		return false
	}
	return t.String() == value.String()
}

func (t UserID) String() string { return t.string() }

func (t UserID) Validate() error {
	if t.isZero() {
		return errors.New("empty value")
	}
	return nil
}

func (t UserID) Value() (driver.Value, error) { return t.string(), nil }

func (t *UserID) Scan(src any) error { return t.scan(src) }

func (t *UserID) UnmarshalText(text []byte) error { return t.scan(text) }

func (t *UserID) isZero() bool {
	return t == nil || (uuid.UUID)(*t) == uuid.Nil
}

func (t *UserID) scan(v any) error {
	return (*uuid.UUID)(t).Scan(v)
}

func (t UserID) string() string {
	return uuid.UUID(t).String()
}

type RequestID uuid.UUID

var RequestIDNil RequestID

func NewRequestID() RequestID {
	return RequestID(uuid.New())
}

func (t RequestID) IsZero() bool { return t.isZero() }

func (t RequestID) MarshalText() ([]byte, error) {
	return []byte(t.string()), nil
}

func (t RequestID) Matches(x interface{}) bool {
	value, ok := x.(RequestID)
	if !ok {
		return false
	}
	return t.String() == value.String()
}

func (t RequestID) String() string { return t.string() }

func (t RequestID) Validate() error {
	if t.isZero() {
		return errors.New("empty value")
	}
	return nil
}

func (t RequestID) Value() (driver.Value, error) { return t.string(), nil }

func (t *RequestID) Scan(src any) error { return t.scan(src) }

func (t *RequestID) UnmarshalText(text []byte) error { return t.scan(text) }

func (t *RequestID) isZero() bool {
	return t == nil || (uuid.UUID)(*t) == uuid.Nil
}

func (t *RequestID) scan(v any) error {
	return (*uuid.UUID)(t).Scan(v)
}

func (t RequestID) string() string {
	return uuid.UUID(t).String()
}

type JobID uuid.UUID

var JobIDNil JobID

func NewJobID() JobID {
	return JobID(uuid.New())
}

func (t JobID) IsZero() bool { return t.isZero() }

func (t JobID) MarshalText() ([]byte, error) {
	return []byte(t.string()), nil
}

func (t JobID) Matches(x interface{}) bool {
	value, ok := x.(JobID)
	if !ok {
		return false
	}
	return t.String() == value.String()
}

func (t JobID) String() string { return t.string() }

func (t JobID) Validate() error {
	if t.isZero() {
		return errors.New("empty value")
	}
	return nil
}

func (t JobID) Value() (driver.Value, error) { return t.string(), nil }

func (t *JobID) Scan(src any) error { return t.scan(src) }

func (t *JobID) UnmarshalText(text []byte) error { return t.scan(text) }

func (t *JobID) isZero() bool {
	return t == nil || (uuid.UUID)(*t) == uuid.Nil
}

func (t *JobID) scan(v any) error {
	return (*uuid.UUID)(t).Scan(v)
}

func (t JobID) string() string {
	return uuid.UUID(t).String()
}

type FailedJobID uuid.UUID

var FailedJobIDNil FailedJobID

func NewFailedJobID() FailedJobID {
	return FailedJobID(uuid.New())
}

func (t FailedJobID) IsZero() bool { return t.isZero() }

func (t FailedJobID) MarshalText() ([]byte, error) {
	return []byte(t.string()), nil
}

func (t FailedJobID) Matches(x interface{}) bool {
	value, ok := x.(FailedJobID)
	if !ok {
		return false
	}
	return t.String() == value.String()
}

func (t FailedJobID) String() string { return t.string() }

func (t FailedJobID) Validate() error {
	if t.isZero() {
		return errors.New("empty value")
	}
	return nil
}

func (t FailedJobID) Value() (driver.Value, error) { return t.string(), nil }

func (t *FailedJobID) Scan(src any) error { return t.scan(src) }

func (t *FailedJobID) UnmarshalText(text []byte) error { return t.scan(text) }

func (t *FailedJobID) isZero() bool {
	return t == nil || (uuid.UUID)(*t) == uuid.Nil
}

func (t *FailedJobID) scan(v any) error {
	return (*uuid.UUID)(t).Scan(v)
}

func (t FailedJobID) string() string {
	return uuid.UUID(t).String()
}
