// Code generated by options-gen. DO NOT EDIT.
package logger

import (
	fmt461e464ebed9 "fmt"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	env string,
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)

	o.env = env

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func WithLevel(opt LogLevelOption) OptOptionsSetter {
	return func(o *Options) {
		o.level = opt
	}
}

func WithSentryDSN(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.sentryDSN = opt
	}
}

func WithVersion(opt string) OptOptionsSetter {
	return func(o *Options) {
		o.version = opt
	}
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("env", _validate_Options_env(o)))
	errs.Add(errors461e464ebed9.NewValidationError("sentryDSN", _validate_Options_sentryDSN(o)))
	errs.Add(errors461e464ebed9.NewValidationError("version", _validate_Options_version(o)))
	return errs.AsError()
}

func _validate_Options_env(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.env, "required,oneof=dev stage prod"); err != nil {
		return fmt461e464ebed9.Errorf("field `env` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_sentryDSN(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.sentryDSN, "http_url,omitempty"); err != nil {
		return fmt461e464ebed9.Errorf("field `sentryDSN` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_version(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.version, "semver,omitempty"); err != nil {
		return fmt461e464ebed9.Errorf("field `version` did not pass the test: %w", err)
	}
	return nil
}
