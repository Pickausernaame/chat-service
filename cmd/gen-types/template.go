package main

import (
	"text/template"
)

var executor = template.Must(template.New("gen-types").Parse(resourceTypeTemplate))

// resourceTypeTemplate - template for generating resource type based on uuid.UUID type.
// For generating required:
// {{.PackageName}} - [string] for package naming
// {{.TypeNames}} - [list] for type naming.
var resourceTypeTemplate = `// Code generated by cmd/gen-types; DO NOT EDIT.
package {{.PackageName}}


import (
	"database/sql/driver"
	"errors"

	"github.com/google/uuid"
)

{{range .TypeNames}} 
type {{.}} uuid.UUID

var {{.}}Nil {{.}}

func New{{.}}() {{.}} {
	return {{.}}(uuid.New())
}

func (t {{.}}) IsZero() bool { return t.isZero() }

func (t {{.}}) MarshalText() ([]byte, error) {
	return []byte(t.string()), nil
}

func (t {{.}}) Matches(x interface{}) bool {
	value, ok := x.({{.}})
	if !ok {
		return false
	}
	return t.String() == value.String()
}

func (t {{.}}) String() string { return t.string() }

func (t {{.}}) Validate() error {
	if t.isZero() {
		return errors.New("empty value")
	}
	return nil
}

func (t {{.}}) Value() (driver.Value, error) { return t.string(), nil }

func (t *{{.}}) Scan(src any) error { return t.scan(src) }

func (t *{{.}}) UnmarshalText(text []byte) error { return t.scan(text) }

func (t *{{.}}) isZero() bool {
	return t == nil || (uuid.UUID)(*t) == uuid.Nil
}

func (t *{{.}}) scan(v any) error {
	return (*uuid.UUID)(t).Scan(v)
}

func (t {{.}}) string() string {
	return uuid.UUID(t).String()
}

{{end}}
`
